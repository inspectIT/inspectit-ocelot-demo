version: '3'

services:
  #  Ocelot
  ## Serves as a collector for traces
  agent:
    image: inspectit/inspectit-ocelot-agent:${INSPECTIT_OCELOT_VERSION}
    container_name: agent
    deploy:
      resources:
        limits:
          memory: 128M
    volumes:
      - agent-vol:/agent

  ##  Fetches the configuration
  ocelot-config-server:
    restart: always
    image: inspectit/inspectit-ocelot-configurationserver:${INSPECTIT_OCELOT_VERSION}
    container_name: ocelot-config-server
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - INSPECTIT_CONFIG_SERVER_WORKING_DIRECTORY=/configuration-server
      - INSPECTIT_CONFIG_SERVER_DEFAULT_USER_PASSWORD=demo
    volumes:
      - ./configuration-server:/configuration-server
    ports:
      - 8090:8090

  ## Self Monitoring
  ocelot-eum-server:
    restart: always
    image: inspectit/inspectit-ocelot-eum-server:${INSPECTIT_OCELOT_VERSION}
    container_name: ocelot-eum-server
    hostname: ocelot-eum-server
    environment:
      - INSPECTIT_EUM_SERVER_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EUM_SERVER_EXPORTERS_METRICS_PROMETHEUS_PORT=9097
      - INSPECTIT_EUM_SERVER_EXPORTERS_METRICS_PROMETHEUS_HOST=0.0.0.0
      - INSPECTIT_EUM_SERVER_EXPORTERS_TRACING_JAEGER_GRPC=jaeger:14250

    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - ./eum-server:/eum-server
    ports:
      - 8085:8085
      - 9097:9097

  #  Petclinic
  config-server:
    restart: always
    image: inspectit/spring-petclinic-config-server:${INSPECTIT_PETCLINIC_VERSION}
    container_name: config-server
    hostname: config-server
    environment:
      - INSPECTIT_SERVICE_NAME=config-server
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9096
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
    entrypoint: ["./dockerize", "java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8888:8888
      - 9096:9096

  discovery-server:
    restart: always
    image: inspectit/spring-petclinic-discovery-server:${INSPECTIT_PETCLINIC_VERSION}
    container_name: discovery-server
    hostname: discovery-server
    environment:
      - INSPECTIT_SERVICE_NAME=discovery-server
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9095
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
      - config-server
    entrypoint: ["./dockerize","-wait=tcp://config-server:8888","-timeout=120s","--","java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8761:8761
      - 9095:9095

  customers-service:
    restart: always
    image: inspectit/spring-petclinic-customers-service:${INSPECTIT_PETCLINIC_VERSION}
    container_name: customers-service
    hostname: customers-service
    environment:
      - INSPECTIT_SERVICE_NAME=customers-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9091
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
      - config-server
      - discovery-server
    entrypoint: ["./dockerize","-wait=tcp://discovery-server:8761","-timeout=120s","--","java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8081:8081
      - 9091:9091

  visits-service:
    restart: always
    image: inspectit/spring-petclinic-visits-service:${INSPECTIT_PETCLINIC_VERSION}
    container_name: visits-service
    hostname: visits-service
    environment:
      - INSPECTIT_SERVICE_NAME=visits-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9092
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
      - config-server
      - discovery-server
    entrypoint: ["./dockerize","-wait=tcp://discovery-server:8761","-timeout=120s","--","java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8082:8082
      - 9092:9092

  vets-service:
    restart: always
    image: inspectit/spring-petclinic-vets-service:${INSPECTIT_PETCLINIC_VERSION}
    container_name: vets-service
    hostname: vets-service
    environment:
      - INSPECTIT_SERVICE_NAME=vets-service
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9093
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
      - config-server
      - discovery-server
    entrypoint: ["./dockerize","-wait=tcp://discovery-server:8761","-timeout=120s","--","java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8083:8083
      - 9093:9093

  api-gateway:
    restart: always
    image: inspectit/spring-petclinic-api-gateway:${INSPECTIT_PETCLINIC_VERSION}
    container_name: api-gateway
    hostname: api-gateway
    environment:
      - INSPECTIT_SERVICE_NAME=api-gateway
      - INSPECTIT_CONFIG_HTTP_URL=http://ocelot-config-server:8090/api/v1/agent/configuration
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_ENABLED=ENABLED
      - INSPECTIT_EXPORTERS_METRICS_PROMETHEUS_PORT=9094
      - INSPECTIT_EXPORTERS_TRACING_JAEGER_URL=http://jaeger:14268/api/traces
    deploy:
      resources:
        limits:
          memory: 1024M
    depends_on:
      - agent
      - ocelot-config-server
      - config-server
      - discovery-server

    entrypoint: ["./dockerize","-wait=tcp://discovery-server:8761","-timeout=120s","--","java", "-javaagent:/agent/inspectit-ocelot-agent.jar", "org.springframework.boot.loader.JarLauncher"]
    volumes:
      - agent-vol:/agent
    ports:
      - 8080:8080
      - 9094:9094

  #  Monitoring Backend

  #  Load Generator
  ## Artificial load on Demo
  load:
    restart: always
    image: inspectit/spring-petclinic-load:1.0
    container_name: load-generator
    hostname: load-generator

  #  Prometheus
  ## Time Series Database & Monitoring
  prometheus:
    restart: always
    image: prom/prometheus:v2.29.1
    container_name: prometheus
    command:
      - '--storage.tsdb.retention.time=7d'
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus/prometheus-node-exporter.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  # Node Exporter
  ## Prometheus exporter for hardware and OS metrics
  node_exporter:
    restart: unless-stopped
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - 9100:9100

  #  Jaeger
  ## Collects and visualizes traces
  jaeger:
    restart: always
    image: jaegertracing/all-in-one:1.25.0
    container_name: jaeger
    ports:
      - 16686:16686

  #  Grafana
  ## Dashboarding
  grafana:
    restart: always
    image: grafana/grafana:9.0.2
    container_name: grafana
    environment:
      - GF_PANELS_DISABLE_SANITIZE_HTML=TRUE
      - GF_SECURITY_ADMIN_PASSWORD=demo
      - GF_PATHS_PROVISIONING=/usr/share/grafana/custom/
      - GF_INSTALL_PLUGINS=https://github.com/NovatecConsulting/novatec-service-dependency-graph-panel/releases/download/v4.0.2/novatec-sdg-panel.zip;novatec-sdg-panel
    volumes:
      - ./grafana/provisioning/prometheus:/usr/share/grafana/custom/
      - ./grafana/provisioning/home-dashboard/home.json:/usr/share/grafana/public/dashboards/home.json

    ports:
      - 3000:3000

  # Grafana Loki & Promtail
  ## Make logs available in Grafana
  loki:
    image: grafana/loki:2.5.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.5.0
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

volumes:
  agent-vol:
